<?php

/**
 * @file
 * School module file for overriding functionality.
 */


/*
 * Implements hook_toolbar_alter()
 */
function school_toolbar_alter(&$items) {
  $items['administration']['#attached']['library'][] = 'school/toolbar-icon';

  // Remove the "Back to site" button from toolbar.
  unset($items['home']);
}


/**
 * Implements hook_form_alter().
 */
function school_form_node_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(\Drupal\school\Controller\SchoolFormAlter::class)
    ->alterForm($form, $form_state, $form_id);
}

/**
 * Implements hook_theme().
 */
function school_theme($existing, $type, $theme, $path) {
  return array(
    'student_count_card' => array(
      'variables' => array('student_count' => NULL,),
    ),
    'node__student' => array(
      'base hook' => 'node',
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function school_preprocess_page(array &$variables) {
  // Check the current route name or any other condition.
  $route_name = \Drupal::routeMatch()->getRouteName();

  if ($route_name == 'entity.node.canonical' && \Drupal::routeMatch()->getParameter('node')->getType() == 'student') {
    // Disable a specific block. Replace 'block_id' with your block's machine name.
    $block_id = 'pagetitle';

    // Check if the block exists in the render array and unset it.
    if (isset($variables['page']['content'][$block_id])) {
      unset($variables['page']['content'][$block_id]);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function school_preprocess_node(&$variables){
  if ($variables['node']->getType() == 'student') {
    if (empty($variables['node']->get('field_student_photo')->entity->uri->value)) {
      $libobj = \Drupal::service('library.service');
      $variables['student_pic'] = $libobj->getDefaultAvatar($variables['node']->get('field_gender')->value);
    } else {
      $variables['student_pic'] = \Drupal::service('file_url_generator')->generateAbsoluteString($variables['node']->get('field_student_photo')->entity->uri->value);
    }
  }
}

/**
 * Implements hook_options_list_alter().
 */
function school_options_list_alter(array &$options, array $context) {
  unset($options['_none']);
}


/**
 * Implements hook_field_create_definitions().
 */
function school_field_create_definitions_alter(array &$definitions) {
  // Define your fields here by entity type.
  $definitions['node'] = [
    'demo_field' => [
      'name'    => 'demo_field',
      'label'   => 'This is my field',
      'type'    => 'string',
      'force'   => FALSE, // No update once field exists.
      'bundles' => [
        'student' => [],
        'article' => [],
      ],
    ],
  ];
}
